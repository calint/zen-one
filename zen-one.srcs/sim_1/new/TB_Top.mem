// # rom intended for test bench
// #  compile with 'zasm'
// #
//     ldi 0x1234 r1     # r1=0x1234
1033 // [0] 4:5
1234 // [1] 4:5
//     ldi 0xabcd r2     # r2=0xabcd
2033 // [2] 5:5
ABCD // [3] 5:5
//     ldi 0xffff r3     # r3=0xffff
3033 // [4] 6:5
FFFF // [5] 6:5
//     st r2 r1          # ram[0xabcd]=0x1234
1273 // [6] 7:5
//     st r1 r3          # ram[0x1234]=0xffff
3173 // [7] 8:5
//     ld r2 r6          # r6=ram[0xabcd] == 0x1234
6253 // [8] 9:5
//     ld r1 r4          # r4=ram[0x1234] == 0xffff
4153 // [9] 10:5
//     st r3 r1          # ram[0xffff]=0x1234
1373 // [10] 11:5
//     ld r3 r5          # r5=ram[0xffff] == 0x1234
5353 // [11] 12:5
//     addi 1 r4         # r4 == 0
4013 // [12] 13:5
//     addi -1 r4        # r4 == 0xffff
4F13 // [13] 14:5
//     add r3 r4         # r4 == 0xfffe
4303 // [14] 15:5
//     sub r3 r4         # r4 == 0xffff
4323 // [15] 16:5
//     or r4 r6          # r6 == 0xffff
6443 // [16] 17:5
//     xor r6 r6         # r6 == 0
6663 // [17] 18:5
//     and r4 r6         # r6 == 0
6483 // [18] 19:5
//     not r4 r6         # r6 == 0
64A3 // [19] 20:5
//     cp r1 r6          # r6 == 0x1234
61C3 // [20] 21:5
//     shf 1 r6          # r6 == 0x0910
60E3 // [21] 22:5
//     shf -1 r6         # r6 = 0x1234
6FE3 // [22] 23:5
//     ifz ldi 0x0001 r7 # z!=1 => does not execute
7031 // [23] 24:5
0001 // [24] 24:5
//     cp r4 r4          # r4 = 0xffff
44C3 // [25] 25:5
//     ifn ldi 0x0001 r7 # n==1 r7=0x0001
7032 // [26] 26:5
0001 // [27] 26:5
//     ifp jmp lbl1      # zn!=00 => does not execute
004C // [28] 27:5
//     jmp lbl1          # 
003F // [29] 28:5
//     0 
0000 // [30] 29:5
// 0               # padding 
0000 // [31] 29:7
// 
// lbl1:
//     call x0030
003B // [32] 32:5
//     ifp call x0040
0048 // [33] 33:5
//     ifz call x0040
0049 // [34] 34:5
//     ifp ldi 0x0040 r9
9030 // [35] 35:5
0040 // [36] 35:5
//     ifz ldi 0x0040 r9
9031 // [37] 36:5
0040 // [38] 36:5
//     ifp jmp x0040
019C // [39] 37:5
//     ifz jmp x0040
018D // [40] 38:5
//     ifn call x0050
005A // [41] 39:5
//     call x0070
007B // [42] 40:5
//     ledi 0b1010
AF33 // [43] 41:5
//     led r9        # r9==0xdcba => led==0xa
9733 // [44] 42:5
//     jmp x0040
013F // [45] 43:5
// 
// @ 0x0030 
0000
0000
// x0030: func
//     addi 1 r8 ret
8017 // [48] 46:5
// endfunc
// 
// @ 0x0040 
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
// x0040:
//     jmp x0040
000F // [64] 50:5
// 
// @ 0x0050 
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
// x0050: func
//     call x0060
006B // [80] 53:5
//     addi 2 r8 ret
8117 // [81] 54:5
// endfunc
// 
//     0 
0000 // [82] 57:5
// 0
0000 // [83] 57:7
//     0 
0000 // [84] 58:5
// 0 
0000 // [85] 58:7
// 0 
0000 // [86] 58:9
// 0
0000 // [87] 58:11
//     0 
0000 // [88] 59:5
// 0 
0000 // [89] 59:7
// 0 
0000 // [90] 59:9
// 0
0000 // [91] 59:11
//     0 
0000 // [92] 60:5
// 0 
0000 // [93] 60:7
// 0 
0000 // [94] 60:9
// 0
0000 // [95] 60:11
// 
// @ 0x0060 x0060: func
//     ifn addi 2 r8 ret
8116 // [96] 63:5
//     ifz addi 2 r8 ret
8115 // [97] 64:5
//     ifp addi 2 r8 ret
8114 // [98] 65:5
// endfunc
// 
// @ 0x0070 
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
// x0070: func
//     ldi 0xdcba r9  ret
9037 // [112] 69:5
DCBA // [113] 69:5
// endfunc

