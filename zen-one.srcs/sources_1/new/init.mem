// ledi 0b1000          # the first instruction is a 'nop'-like instruction
8F33 // [0] 1:1
//                      #  which executes during the reset
// 
// xor r15 r15          # zero r15, a counter
FF63 // [1] 4:1
// loop:
//     ldi hello.len r2 # hello
2033 // [2] 6:5
0096 // [3] 6:5
//     ld r2 r2         # load len
2253 // [4] 7:5
//     ldi hello.buf r1 # buffer 
1033 // [5] 8:5
0097 // [6] 8:5
//     call print       #
005B // [7] 9:5
//     
//     addi 1 r15       # increment r15 by 1
F013 // [8] 11:5
//     cp r15 r1        # print r15 as hex
1FC3 // [9] 12:5
//     call print_hex   #
006B // [10] 13:5
//     ldi 0x20 r1      # space
1033 // [11] 14:5
0020 // [12] 14:5
//     wl r1            #
1233 // [13] 15:5
//     
//     ldi input.buf r1 # input buffer
1033 // [14] 17:5
009B // [15] 17:5
//     ldi input.len r2 # buffer size address
2033 // [16] 18:5
009A // [17] 18:5
//     ld r2 r2         # buffer size
2253 // [18] 19:5
//     call input       # input (buffer:r1, buflen:r2)
002B // [19] 20:5
//     ldi 0xa r3       # new line
3033 // [20] 21:5
000A // [21] 21:5
//     wl r3            #  send
3233 // [22] 22:5
//     call print       # print (buffer:r1, buflen:r2) 'input' sets buflen 
005B // [23] 23:5
//     ldi 0xa r3       # new line
3033 // [24] 24:5
000A // [25] 24:5
//     wl r3            #  send
3233 // [26] 25:5
//     jmp loop
FE7F // [27] 26:5
0000
0000
0000
0000
// 
// input: func # r1: bufptr, r2: buflen  clobbers: r2, r3, r4, r5, r6, r7, r8, r9, r10
//     ldi 0x000d r3    # '\r' to compare with low byte
3033 // [32] 29:5
000D // [33] 29:5
//     ldi 0x0d00 r4    # '\r' to compare with high byte
4033 // [34] 30:5
0D00 // [35] 30:5
//     ldi 0x00ff r5    # low byte mask
5033 // [36] 31:5
00FF // [37] 31:5
//     ldi 0xff00 r6    # high byte mask
6033 // [38] 32:5
FF00 // [39] 32:5
//     cp r1 r10        # don't modify r1, use r10 instead
A1C3 // [40] 33:5
//     xor r9 r9        # zero r9 which is the number of bytes read
9963 // [41] 34:5
//     loop:
//         # read the low byte
//         rl r7        # read into lower r7
7633 // [42] 37:9
//         wl r7        # echo
7233 // [43] 38:9
//         addi 1 r9    # increment number of bytes read
9013 // [44] 39:9
//         st r10 r7    # store r7 to buffer
7A73 // [45] 40:9
//         cp r7 r8     # check
87C3 // [46] 41:9
//         and r5 r8    #  if
8583 // [47] 42:9
//         xor r3 r8    #   carriage return
8363 // [48] 43:9
//         ifz jmp done # if true then done
00FD // [49] 44:9
//         addi -1 r2   # decrement buflen
2F13 // [50] 45:9
//         ifz jmp done # if zero then buffer full
00DD // [51] 46:9
// 
//         # read the high byte
//         rh r7        # read into higher r7
7E33 // [52] 49:9
//         wh r7        # echo
7A33 // [53] 50:9
//         addi 1 r9    # increment number of bytes read
9013 // [54] 51:9
//         st r10 r7    # store r7 to buffer
7A73 // [55] 52:9
//         cp r7 r8     # check
87C3 // [56] 53:9
//         and r6 r8    #  if
8683 // [57] 54:9
//         xor r4 r8    #   carriage return
8463 // [58] 55:9
//         ifz jmp done # if true then done
005D // [59] 56:9
//         addi -1 r2   # decrement buflen
2F13 // [60] 57:9
//         ifz jmp done # if zero then buffer full
003D // [61] 58:9
// 
//         addi 1 r10   # increment buffer pointer
A013 // [62] 60:9
//         jmp loop     # 
FEBF // [63] 61:9
//     done:            # 
//     cp r9 r2 ret     # copy the number of read bytes into r2 as return
29C7 // [64] 63:5
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
// endfunc
// 
// print: func # r1: strptr, r2: strlen   clobbers: r1, r3, r4
//     ldi 0xfffe r3        
3033 // [80] 67:5
FFFE // [81] 67:5
//     and r2 r3            # get number of words containing 2 characters each
3283 // [82] 68:5
//     ifz jmp done         # if 0 then just one character
008D // [83] 69:5
//     shf 1 r3             # divide even length by 2
30E3 // [84] 70:5
//     loop:            
//         ld r1 r4         # load ram att address r1 to r4
4153 // [85] 72:9
//         wl r4            # write the low byte
4233 // [86] 73:9
//         wh r4            # write the high byte
4A33 // [87] 74:9
//         addi 1 r1        # next 2 bytes
1013 // [88] 75:9
//         addi -1 r3       # decrement the number of bytes couple to print
3F13 // [89] 76:9
//         ifp jmp loop     # if not zero continue
FFBC // [90] 77:9
//     done:                
//     addi 1 r3            # reusing r3 which is now 0
3013 // [91] 79:5
//     and r2 r3            # find out if there is one more character in next word
3283 // [92] 80:5
//     ifz cp r3 r3  ret    # nop and return if no trailing character
33C5 // [93] 81:5
//     ld r1 r4             # write the
4153 // [94] 82:5
//     wl r4  ret           #   last character and return
4237 // [95] 83:5
// endfunc
// 
// print_hex: func # r1: number   clobbers: r2 r3 r4 r5 r6 r7
//     ldi 0x0f r2    # bit mask
2033 // [96] 87:5
000F // [97] 87:5
//     ldi 10 r3      # constant 10 for compare
3033 // [98] 88:5
000A // [99] 88:5
//     ldi 0x30 r4    # bits to 'or' to map number to ascii 0-9
4033 // [100] 89:5
0030 // [101] 89:5
//     ldi 0x41 r5    # ascii 'A'
5033 // [102] 90:5
0041 // [103] 90:5
// 
//     # bits 15:12
//     cp r1 r7           # don't clobber r1
71C3 // [104] 93:5
//     shf 4 r7           # shift to
73E3 // [105] 94:5
//     shf 8 r7           #   lowest nibble
77E3 // [106] 95:5
//     cp r7 r6           # 
67C3 // [107] 96:5
//     sub r3 r6          # compare with 10
6323 // [108] 97:5
//     ifp jmp letter4    # if r6 > r3
005C // [109] 98:5
//     ifz jmp letter4    # if r6 == r3
004D // [110] 99:5
//         or r4 r7       # nibble below 10, 'or' 0x30 to get ascii digit 0-9
7443 // [111] 100:9
//         wl r7          # write ascii 0-9
7233 // [112] 101:9
//         jmp hex3       # next nibble
003F // [113] 102:9
//     letter4:           # nibble 10 or above
//     add r5 r6          # 'A' + r6
6503 // [114] 104:5
//     wl r6              # write ascii a-f
6233 // [115] 105:5
// 
//     # bits 11:8
//     hex3:
//     cp r1 r7           # don't clobber r1
71C3 // [116] 109:5
//     shf 8 r7           # shift to lowest nibble
77E3 // [117] 110:5
//     and r2 r7          # bit mask lowest nibble
7283 // [118] 111:5
//     cp r7 r6           # compare with
67C3 // [119] 112:5
//     sub r3 r6          #   10
6323 // [120] 113:5
//     ifp jmp letter3    # if greater
005C // [121] 114:5
//     ifz jmp letter3    # if equal
004D // [122] 115:5
//         or r4 r7       
7443 // [123] 116:9
//         wl r7
7233 // [124] 117:9
//         jmp hex2
003F // [125] 118:9
//     letter3:            
//     add r5 r6          
6503 // [126] 120:5
//     wl r6              
6233 // [127] 121:5
// 
//     # bits 7:4
//     hex2:
//     cp r1 r7           
71C3 // [128] 125:5
//     shf 4 r7           
73E3 // [129] 126:5
//     and r2 r7
7283 // [130] 127:5
//     cp r7 r6           
67C3 // [131] 128:5
//     sub r3 r6          
6323 // [132] 129:5
//     ifp jmp letter2    
005C // [133] 130:5
//     ifz jmp letter2    
004D // [134] 131:5
//         or r4 r7       
7443 // [135] 132:9
//         wl r7
7233 // [136] 133:9
//         jmp hex1
003F // [137] 134:9
//     letter2:           
//     add r5 r6          
6503 // [138] 136:5
//     wl r6              
6233 // [139] 137:5
// 
//     # bits 3:0
//     hex1:
//     cp r1 r7           
71C3 // [140] 141:5
//     and r2 r7
7283 // [141] 142:5
//     cp r7 r6           
67C3 // [142] 143:5
//     sub r3 r6          
6323 // [143] 144:5
//     ifp jmp letter1    
004C // [144] 145:5
//     ifz jmp letter1    
003D // [145] 146:5
//         or r4 r7       
7443 // [146] 147:9
//         wl r7  ret
7237 // [147] 148:9
//     letter1:          
//     add r5 r6         
6503 // [148] 150:5
//     wl r6  ret
6237 // [149] 151:5
// 
// endfunc
// 
// # ----------------------------------------------------------------------
// hello.len: 6
0006 // [150] 156:-1
// hello.buf:
//     0x4548 # 'EH'
4548 // [151] 158:5
//     0x4c4c # 'LL'
4C4C // [152] 159:5
//     0x204f # ' O'
204F // [153] 160:5
// 
// input.len: 64
0040 // [154] 162:-2
// input.buf:
//     0 
0000 // [155] 164:5
// 0 
0000 // [156] 164:7
// 0 
0000 // [157] 164:9
// 0 
0000 // [158] 164:11
// 0 
0000 // [159] 164:13
// 0 
0000 // [160] 164:15
// 0 
0000 // [161] 164:17
// 0
0000 // [162] 164:19
//     0 
0000 // [163] 165:5
// 0 
0000 // [164] 165:7
// 0 
0000 // [165] 165:9
// 0 
0000 // [166] 165:11
// 0 
0000 // [167] 165:13
// 0 
0000 // [168] 165:15
// 0 
0000 // [169] 165:17
// 0
0000 // [170] 165:19
//     0 
0000 // [171] 166:5
// 0 
0000 // [172] 166:7
// 0 
0000 // [173] 166:9
// 0 
0000 // [174] 166:11
// 0 
0000 // [175] 166:13
// 0 
0000 // [176] 166:15
// 0 
0000 // [177] 166:17
// 0
0000 // [178] 166:19
//     0 
0000 // [179] 167:5
// 0 
0000 // [180] 167:7
// 0 
0000 // [181] 167:9
// 0 
0000 // [182] 167:11
// 0 
0000 // [183] 167:13
// 0 
0000 // [184] 167:15
// 0 
0000 // [185] 167:17
// 0
0000 // [186] 167:19
// 
//     0 
0000 // [187] 169:5
// 0 
0000 // [188] 169:7
// 0 
0000 // [189] 169:9
// 0 
0000 // [190] 169:11
// 0 
0000 // [191] 169:13
// 0 
0000 // [192] 169:15
// 0 
0000 // [193] 169:17
// 0
0000 // [194] 169:19
//     0 
0000 // [195] 170:5
// 0 
0000 // [196] 170:7
// 0 
0000 // [197] 170:9
// 0 
0000 // [198] 170:11
// 0 
0000 // [199] 170:13
// 0 
0000 // [200] 170:15
// 0 
0000 // [201] 170:17
// 0
0000 // [202] 170:19
//     0 
0000 // [203] 171:5
// 0 
0000 // [204] 171:7
// 0 
0000 // [205] 171:9
// 0 
0000 // [206] 171:11
// 0 
0000 // [207] 171:13
// 0 
0000 // [208] 171:15
// 0 
0000 // [209] 171:17
// 0
0000 // [210] 171:19
//     0 
0000 // [211] 172:5
// 0 
0000 // [212] 172:7
// 0 
0000 // [213] 172:9
// 0 
0000 // [214] 172:11
// 0 
0000 // [215] 172:13
// 0 
0000 // [216] 172:15
// 0 
0000 // [217] 172:17
// 0
0000 // [218] 172:19
//     

