// addi 1 r0
0013 // [0] 1:1
// led r0
0733 // [1] 2:1
// 
// loop:
//     ldi hello.len r2 # hello
2033 // [2] 5:5
0060 // [3] 5:5
//     ld r2 r2         # load len
2253 // [4] 6:5
//     ldi hello.buf r1 # buffer 
1033 // [5] 7:5
0061 // [6] 7:5
//     call print
005B // [7] 8:5
//     
//     ldi input.buf r1 # input buffer
1033 // [8] 10:5
0065 // [9] 10:5
//     ldi input.len r2 # buffer size address
2033 // [10] 11:5
0064 // [11] 11:5
//     ld r2 r2         # buffer size
2253 // [12] 12:5
//     call input       # input (buffer:r1, buflen:r2)
002B // [13] 13:5
//     ldi 0xa r3       # new line
3033 // [14] 14:5
000A // [15] 14:5
//     wl r3            #  send
3233 // [16] 15:5
//     call print       # print (buffer:r1, buflen:r2) 'input' sets buflen 
005B // [17] 16:5
//     ldi 0xa r3       # new line
3033 // [18] 17:5
000A // [19] 17:5
//     wl r3            #  send
3233 // [20] 18:5
//     jmp loop
FEDF // [21] 19:5
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
// 
// input: func # r1: bufptr, r2: buflen  clobbers: r2, r3, r4, r5, r6, r7, r8, r9, r10
//     ldi 0x000d r3
3033 // [32] 22:5
000D // [33] 22:5
//     ldi 0x0d00 r4
4033 // [34] 23:5
0D00 // [35] 23:5
//     ldi 0x00ff r5
5033 // [36] 24:5
00FF // [37] 24:5
//     ldi 0xff00 r6
6033 // [38] 25:5
FF00 // [39] 25:5
//     cp r1 r10
A1C3 // [40] 26:5
//     xor r9 r9
9963 // [41] 27:5
//     loop:
//         # read the low byte
//         rl r7        # read into lower r7
7633 // [42] 30:9
//         wl r7        # echo
7233 // [43] 31:9
//         addi 1 r9    # increment length
9013 // [44] 32:9
//         st r10 r7    # store r7 to buffer
7A73 // [45] 33:9
//         cp r7 r8     # check
87C3 // [46] 34:9
//         and r5 r8    #  if
8583 // [47] 35:9
//         xor r3 r8    #   carriage return
8363 // [48] 36:9
//         ifz jmp done # if true then done
00FD // [49] 37:9
//         addi -1 r2   # decrement buflen
2F13 // [50] 38:9
//         ifz jmp done # if zero then buffer full
00DD // [51] 39:9
// 
//         # read the high byte
//         rh r7        # read into higher r7
7E33 // [52] 42:9
//         wh r7        # echo
7A33 // [53] 43:9
//         addi 1 r9    # increment length
9013 // [54] 44:9
//         st r10 r7    # store r7 to buffer
7A73 // [55] 45:9
//         cp r7 r8     # check
87C3 // [56] 46:9
//         and r6 r8    #  if
8683 // [57] 47:9
//         xor r4 r8    #   carriage return
8463 // [58] 48:9
//         ifz jmp done # if true then done
005D // [59] 49:9
//         addi -1 r2   # decrement buflen
2F13 // [60] 50:9
//         ifz jmp done # if zero then buffer full
003D // [61] 51:9
// 
//         addi 1 r10   # increment buffer pointer
A013 // [62] 53:9
//         jmp loop     # 
FEBF // [63] 54:9
//     done:            # 
//     cp r9 r2 ret     # 
29C7 // [64] 56:5
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
0000
// endfunc
// 
// print: func # r1: strptr, r2: strlen   clobbers: r1, r3, r4
//     ldi 0xfffe r3        
3033 // [80] 60:5
FFFE // [81] 60:5
//     and r2 r3            # get number of words containing 2 characters each
3283 // [82] 61:5
//     ifz jmp done         # if 0 then just one character
008D // [83] 62:5
//     shf 1 r3             # divide even length by 2
30E3 // [84] 63:5
//     loop:            
//         ld r1 r4     
4153 // [85] 65:9
//         wl r4        
4233 // [86] 66:9
//         wh r4         
4A33 // [87] 67:9
//         addi 1 r1     
1013 // [88] 68:9
//         addi -1 r3    
3F13 // [89] 69:9
//         ifp jmp loop  
FFBC // [90] 70:9
//     done:                
//     addi 1 r3            # reusing r3 which is now 0
3013 // [91] 72:5
//     and r2 r3            # find out if there is one more character in next word
3283 // [92] 73:5
//     ifz cp r3 r3  ret    # nop and return if no trailing character
33C5 // [93] 74:5
//     ld r1 r4             # write the
4153 // [94] 75:5
//     wl r4  ret           #   last character
4237 // [95] 76:5
// endfunc
// 
// hello.len: 6
0006 // [96] 79:-1
// hello.buf:
//     0x4548 # 'EH'
4548 // [97] 81:5
//     0x4c4c # 'LL'
4C4C // [98] 82:5
//     0x204f # ' O'
204F // [99] 83:5
// 
// input.len: 64
0040 // [100] 85:-2
// input.buf:
//     0 
0000 // [101] 87:5
// 0 
0000 // [102] 87:7
// 0 
0000 // [103] 87:9
// 0 
0000 // [104] 87:11
// 0 
0000 // [105] 87:13
// 0 
0000 // [106] 87:15
// 0 
0000 // [107] 87:17
// 0
0000 // [108] 87:19
//     0 
0000 // [109] 88:5
// 0 
0000 // [110] 88:7
// 0 
0000 // [111] 88:9
// 0 
0000 // [112] 88:11
// 0 
0000 // [113] 88:13
// 0 
0000 // [114] 88:15
// 0 
0000 // [115] 88:17
// 0
0000 // [116] 88:19
//     0 
0000 // [117] 89:5
// 0 
0000 // [118] 89:7
// 0 
0000 // [119] 89:9
// 0 
0000 // [120] 89:11
// 0 
0000 // [121] 89:13
// 0 
0000 // [122] 89:15
// 0 
0000 // [123] 89:17
// 0
0000 // [124] 89:19
//     0 
0000 // [125] 90:5
// 0 
0000 // [126] 90:7
// 0 
0000 // [127] 90:9
// 0 
0000 // [128] 90:11
// 0 
0000 // [129] 90:13
// 0 
0000 // [130] 90:15
// 0 
0000 // [131] 90:17
// 0
0000 // [132] 90:19
// 
//     0 
0000 // [133] 92:5
// 0 
0000 // [134] 92:7
// 0 
0000 // [135] 92:9
// 0 
0000 // [136] 92:11
// 0 
0000 // [137] 92:13
// 0 
0000 // [138] 92:15
// 0 
0000 // [139] 92:17
// 0
0000 // [140] 92:19
//     0 
0000 // [141] 93:5
// 0 
0000 // [142] 93:7
// 0 
0000 // [143] 93:9
// 0 
0000 // [144] 93:11
// 0 
0000 // [145] 93:13
// 0 
0000 // [146] 93:15
// 0 
0000 // [147] 93:17
// 0
0000 // [148] 93:19
//     0 
0000 // [149] 94:5
// 0 
0000 // [150] 94:7
// 0 
0000 // [151] 94:9
// 0 
0000 // [152] 94:11
// 0 
0000 // [153] 94:13
// 0 
0000 // [154] 94:15
// 0 
0000 // [155] 94:17
// 0
0000 // [156] 94:19
//     0 
0000 // [157] 95:5
// 0 
0000 // [158] 95:7
// 0 
0000 // [159] 95:9
// 0 
0000 // [160] 95:11
// 0 
0000 // [161] 95:13
// 0 
0000 // [162] 95:15
// 0 
0000 // [163] 95:17
// 0
0000 // [164] 95:19
//     

